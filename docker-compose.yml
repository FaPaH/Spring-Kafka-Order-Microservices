version: "3.8"

networks:
  app:
    driver: bridge

volumes:
  order-db-data:
    driver: local
  stock-db-data:
    driver: local
  kafka-data:
    driver: local

services:
  order-service:
    container_name: order-service
    build: .
    networks:
      - app
    depends_on:
      - kafka1
      - kafka2
      - kafka3
      - order-postgresdb
    env_file:
      - .env
    ports:
      - ${SPRING_LOCAL_ORDER_SERVICE_PORT}:${SPRING_LOCAL_ORDER_SERVICE_PORT}
    environment:
      SPRING_APPLICATION_JSON: '{ 
              "server.port" : "${SPRING_LOCAL_ORDER_SERVICE_PORT}",
      
              "spring.datasource.url"  : "jdbc:postgresql://order-postgresdb:${POSTGRESDB_DOCKER_ORDERDB_PORT}/${POSTGRES_ORDER_DATABASE}",
              "spring.datasource.username" : "${POSTGRESDB_USER}",
              "spring.datasource.password" : "${POSTGRESDB_ROOT_PASSWORD}",
              "spring.jpa.properties.hibernate.dialect" : "org.hibernate.dialect.PostgreSQLDialect",
              "spring.jpa.hibernate.ddl-auto" : "update",
              
              "spring.kafka.bootstrap-servers" : "kafka1:${KAFKA_BROKER_1_EXTERNAL_PORT},kafka2:${KAFKA_BROKER_2_EXTERNAL_PORT},kafka3:${KAFKA_BROKER_3_EXTERNAL_PORT}",
              "spring.kafka.producer.acks" : "all",
              "spring.kafka.producer.bootstrap-servers" : "kafka1:${KAFKA_BROKER_1_EXTERNAL_PORT},kafka2:${KAFKA_BROKER_2_EXTERNAL_PORT},kafka3:${KAFKA_BROKER_3_EXTERNAL_PORT}",
              "spring.kafka.producer.key-serializer" : "org.apache.kafka.common.serialization.StringSerializer",
              "spring.kafka.producer.value-serializer" : "org.springframework.kafka.support.serializer.JsonSerializer",
              "spring.kafka.producer.properties.delivery.timeout.ms" : "10000",
              "spring.kafka.producer.properties.linger.ms" : "0",
              "spring.kafka.producer.properties.request.timeout.ms" : "5000",
              "spring.kafka.producer.properties.enable.idempotence" : "true",
              "spring.kafka.producer.properties.max.in.flight.requests.per.connection" : "5",

              "spring.kafka.consumer.bootstrap-servers" : "kafka1:${KAFKA_BROKER_1_EXTERNAL_PORT},kafka2:${KAFKA_BROKER_2_EXTERNAL_PORT},kafka3:${KAFKA_BROKER_3_EXTERNAL_PORT}",
              "spring.kafka.consumer.key-deserializer" : "org.springframework.kafka.support.serializer.ErrorHandlingDeserializer",
              "spring.kafka.consumer.value-deserializer" : "org.springframework.kafka.support.serializer.ErrorHandlingDeserializer",
              "spring.kafka.consumer.group-id" : "product-created-events",
              "spring.kafka.producer.properties.spring.json.trusted.packages" : "*",
              "spring.kafka.producer.properties.spring.deserializer.key.delegate.class" : "org.apache.kafka.common.serialization.StringDeserializer",
              "spring.kafka.producer.properties.spring.deserializer.value.delegate.class" : "org.springframework.kafka.support.serializer.JsonDeserializer"
            }'
    volumes:
      - .m2:/root/order-service/

  stock-service:
    container_name: stock-service
    build: .
    networks:
      - app
    depends_on:
      - kafka1
      - kafka2
      - kafka3
      - stock-postgresdb
    env_file:
      - .env
    ports:
      - ${SPRING_LOCAL_STOCK_SERVICE_PORT}:${SPRING_LOCAL_STOCK_SERVICE_PORT}
    environment:
      SPRING_APPLICATION_JSON: '{
        "server.port" : "${SPRING_LOCAL_STOCK_SERVICE_PORT}",
      
        "spring.datasource.url"  : "jdbc:postgresql://stock-postgresdb:${POSTGRESDB_DOCKER_STOCKDB_PORT}/${POSTGRES_STOCK_DATABASE}",
        "spring.datasource.username" : "${POSTGRESDB_USER}",
        "spring.datasource.password" : "${POSTGRESDB_ROOT_PASSWORD}",
        "spring.jpa.properties.hibernate.dialect" : "org.hibernate.dialect.PostgreSQLDialect",
        "spring.jpa.hibernate.ddl-auto" : "update",
        
        "spring.kafka.bootstrap-servers" : "kafka1:${KAFKA_BROKER_1_EXTERNAL_PORT},kafka2:${KAFKA_BROKER_2_EXTERNAL_PORT},kafka3:${KAFKA_BROKER_3_EXTERNAL_PORT}",
        "spring.kafka.producer.acks" : "all",
        "spring.kafka.producer.bootstrap-servers" : "kafka1:${KAFKA_BROKER_1_EXTERNAL_PORT},kafka2:${KAFKA_BROKER_2_EXTERNAL_PORT},kafka3:${KAFKA_BROKER_3_EXTERNAL_PORT}",
        "spring.kafka.producer.key-serializer" : "org.apache.kafka.common.serialization.StringSerializer",
        "spring.kafka.producer.value-serializer" : "org.springframework.kafka.support.serializer.JsonSerializer",
        "spring.kafka.producer.properties.delivery.timeout.ms" : "10000",
        "spring.kafka.producer.properties.linger.ms" : "0",
        "spring.kafka.producer.properties.request.timeout.ms" : "5000",
        "spring.kafka.producer.properties.enable.idempotence" : "true",
        "spring.kafka.producer.properties.max.in.flight.requests.per.connection" : "5",
        
        "spring.kafka.consumer.bootstrap-servers" : "kafka1:${KAFKA_BROKER_1_EXTERNAL_PORT},kafka2:${KAFKA_BROKER_2_EXTERNAL_PORT},kafka3:${KAFKA_BROKER_3_EXTERNAL_PORT}",
        "spring.kafka.consumer.key-deserializer" : "org.springframework.kafka.support.serializer.ErrorHandlingDeserializer",
        "spring.kafka.consumer.value-deserializer" : "org.springframework.kafka.support.serializer.ErrorHandlingDeserializer",
        "spring.kafka.consumer.group-id" : "product-checked-events",
        "spring.kafka.producer.properties.spring.json.trusted.packages" : "*",
        "spring.kafka.producer.properties.spring.deserializer.key.delegate.class" : "org.apache.kafka.common.serialization.StringDeserializer",
        "spring.kafka.producer.properties.spring.deserializer.value.delegate.class" : "org.springframework.kafka.support.serializer.JsonDeserializer"
      }'
    volumes:
      - .m2:/root/stock-service/

  kafka1:
    container_name: kafka1
    env_file:
      - .env
    image: "bitnami/kafka:latest"
    networks:
      - app
    ports:
      - ${KAFKA_BROKER_1_EXTERNAL_PORT}:${KAFKA_BROKER_1_EXTERNAL_PORT}
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_KRAFT_CLUSTER_ID=fZSmOdmYTEGGHzaVPoafYw
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka1:${KAFKA_CONTROLLER_PORT},2@kafka2:${KAFKA_CONTROLLER_PORT},3@kafka3:${KAFKA_CONTROLLER_PORT}
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:${KAFKA_BROKER_PORT},CONTROLLER://:${KAFKA_CONTROLLER_PORT},EXTERNAL://:${KAFKA_BROKER_1_EXTERNAL_PORT}
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka1:${KAFKA_BROKER_PORT},EXTERNAL://localhost:${KAFKA_BROKER_1_EXTERNAL_PORT}
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    volumes:
      - .volumes:/kafka/server-1:/bitnami/kafka

  kafka2:
    container_name: kafka2
    env_file:
      - .env
    image: "bitnami/kafka:latest"
    networks:
      - app
    ports:
      - ${KAFKA_BROKER_2_EXTERNAL_PORT}:${KAFKA_BROKER_2_EXTERNAL_PORT}
    environment:
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_KRAFT_CLUSTER_ID=fZSmOdmYTEGGHzaVPoafYw
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka1:${KAFKA_CONTROLLER_PORT},2@kafka2:${KAFKA_CONTROLLER_PORT},3@kafka3:${KAFKA_CONTROLLER_PORT}
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:${KAFKA_BROKER_PORT},CONTROLLER://:${KAFKA_CONTROLLER_PORT},EXTERNAL://:${KAFKA_BROKER_2_EXTERNAL_PORT}
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka1:${KAFKA_BROKER_PORT},EXTERNAL://localhost:${KAFKA_BROKER_2_EXTERNAL_PORT}
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    volumes:
      - .volumes:/kafka/server-2:/bitnami/kafka

  kafka3:
    container_name: kafka3
    env_file:
      - .env
    image: "bitnami/kafka:latest"
    networks:
      - app
    ports:
      - ${KAFKA_BROKER_3_EXTERNAL_PORT}:${KAFKA_BROKER_3_EXTERNAL_PORT}
    environment:
      - KAFKA_CFG_NODE_ID=3
      - KAFKA_KRAFT_CLUSTER_ID=fZSmOdmYTEGGHzaVPoafYw
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka1:${KAFKA_CONTROLLER_PORT},2@kafka2:${KAFKA_CONTROLLER_PORT},3@kafka3:${KAFKA_CONTROLLER_PORT}
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:${KAFKA_BROKER_PORT},CONTROLLER://:${KAFKA_CONTROLLER_PORT},EXTERNAL://:${KAFKA_BROKER_3_EXTERNAL_PORT}
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka1:${KAFKA_BROKER_PORT},EXTERNAL://localhost:${KAFKA_BROKER_3_EXTERNAL_PORT}
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    volumes:
      - .volumes:/kafka/server-3:/bitnami/kafka

  order-postgresdb:
    container_name: order-postgresdb
    image: "postgres:latest"
    networks:
      - app
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRESDB_USER}
      POSTGRES_PASSWORD: ${POSTGRESDB_ROOT_PASSWORD}
      POSTGRES_DB: ${POSTGRES_ORDER_DATABASE}
    expose:
      - ${POSTGRESDB_DOCKER_ORDERDB_PORT}
    ports:
      - ${POSTGRESDB_LOCAL_ORDERDB_PORT}:${POSTGRESDB_DOCKER_ORDERDB_PORT}
    volumes:
      - .db:/var/lib/postgres/orderdb
    command: -p ${POSTGRESDB_DOCKER_ORDERDB_PORT}

  stock-postgresdb:
    container_name: stock-postgresdb
    image: "postgres:latest"
    networks:
      - app
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRESDB_USER}
      POSTGRES_PASSWORD: ${POSTGRESDB_ROOT_PASSWORD}
      POSTGRES_DB: ${POSTGRES_STOCK_DATABASE}
    expose:
      - ${POSTGRESDB_DOCKER_STOCKDB_PORT}
    ports:
      - ${POSTGRESDB_LOCAL_STOCKDB_PORT}:${POSTGRESDB_DOCKER_STOCKDB_PORT}
    volumes:
      - .db:/var/lib/postgres/stockdb
    command: -p ${POSTGRESDB_DOCKER_STOCKDB_PORT}
